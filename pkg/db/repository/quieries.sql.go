// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: quieries.sql

package repository

import (
	"context"
	"database/sql"
	"encoding/json"
)

const citiesList = `-- name: CitiesList :many
SELECT id, city, latitude, longitude, country
FROM cities
ORDER BY city
`

func (q *Queries) CitiesList(ctx context.Context) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, citiesList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.City,
			&i.Latitude,
			&i.Longitude,
			&i.Country,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const city = `-- name: City :one
SELECT city, latitude, longitude, country
FROM cities
WHERE id = $1
`

type CityRow struct {
	City      sql.NullString
	Latitude  float64
	Longitude float64
	Country   sql.NullString
}

func (q *Queries) City(ctx context.Context, id int32) (CityRow, error) {
	row := q.db.QueryRowContext(ctx, city, id)
	var i CityRow
	err := row.Scan(
		&i.City,
		&i.Latitude,
		&i.Longitude,
		&i.Country,
	)
	return i, err
}

const fullFcastByTime = `-- name: FullFcastByTime :many
SELECT f.date, f.temperature, f.weather
FROM forecasts f
WHERE f.city_id = $1
ORDER BY ABS(f.date - $2)
LIMIT 2
`

type FullFcastByTimeParams struct {
	CityID int32
	Date   int64
}

type FullFcastByTimeRow struct {
	Date        int64
	Temperature float64
	Weather     json.RawMessage
}

func (q *Queries) FullFcastByTime(ctx context.Context, arg FullFcastByTimeParams) ([]FullFcastByTimeRow, error) {
	rows, err := q.db.QueryContext(ctx, fullFcastByTime, arg.CityID, arg.Date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FullFcastByTimeRow
	for rows.Next() {
		var i FullFcastByTimeRow
		if err := rows.Scan(&i.Date, &i.Temperature, &i.Weather); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newCitiesList = `-- name: NewCitiesList :one
INSERT INTO cities(city, latitude, longitude, country) 
VALUES ($1, $2, $3, $4)
ON CONFLICT DO NOTHING
RETURNING ID
`

type NewCitiesListParams struct {
	City      sql.NullString
	Latitude  float64
	Longitude float64
	Country   sql.NullString
}

func (q *Queries) NewCitiesList(ctx context.Context, arg NewCitiesListParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, newCitiesList,
		arg.City,
		arg.Latitude,
		arg.Longitude,
		arg.Country,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const newForecast = `-- name: NewForecast :exec
INSERT INTO forecasts(city_id, date, temperature, weather) 
VALUES ($1, $2, $3, $4)
ON CONFLICT (city_id, date) 
DO UPDATE SET temperature = EXCLUDED.temperature, weather = EXCLUDED.weather
`

type NewForecastParams struct {
	CityID      int32
	Date        int64
	Temperature float64
	Weather     json.RawMessage
}

func (q *Queries) NewForecast(ctx context.Context, arg NewForecastParams) error {
	_, err := q.db.ExecContext(ctx, newForecast,
		arg.CityID,
		arg.Date,
		arg.Temperature,
		arg.Weather,
	)
	return err
}

const shortFcastForCity = `-- name: ShortFcastForCity :many
SELECT f.city_id, f.date, f.temperature
FROM forecasts f
WHERE f.city_id = $1
`

type ShortFcastForCityRow struct {
	CityID      int32
	Date        int64
	Temperature float64
}

func (q *Queries) ShortFcastForCity(ctx context.Context, cityID int32) ([]ShortFcastForCityRow, error) {
	rows, err := q.db.QueryContext(ctx, shortFcastForCity, cityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShortFcastForCityRow
	for rows.Next() {
		var i ShortFcastForCityRow
		if err := rows.Scan(&i.CityID, &i.Date, &i.Temperature); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
